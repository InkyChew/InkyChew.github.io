<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Becomegood</title><link>https://inkychew.github.io/en-us/</link><description>Recent content on Becomegood</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 24 Nov 2024 09:00:00 +0000</lastBuildDate><atom:link href="https://inkychew.github.io/en-us/index.xml" rel="self" type="application/rss+xml"/><item><title>Efficient Sequential List Update with SignalR in Angular and .NET</title><link>https://inkychew.github.io/en-us/sequential-list-update/</link><pubDate>Sun, 24 Nov 2024 09:00:00 +0000</pubDate><guid>https://inkychew.github.io/en-us/sequential-list-update/</guid><description>Introduction When working with task management or planning applications, ensuring that users can reorder lists efficiently and in real-time is critical. A user may need to adjust the sequence of tasks, and such updates must be immediately reflected across all active users.
In this post, we’ll walk through how to manage and broadcast sequential list updates in real-time using SignalR for broadcasting updates and Angular for frontend notification handling. The goal is to provide users with a seamless experience as they reorder a list.</description></item><item><title>Using Signals to Update Data in Angular 18: A Comparison with RxJS</title><link>https://inkychew.github.io/en-us/angular-signal/</link><pubDate>Wed, 20 Nov 2024 09:00:00 +0000</pubDate><guid>https://inkychew.github.io/en-us/angular-signal/</guid><description>A new feature called signals has emerged in Angular, offering a cleaner and more intuitive approach to state management compared to the traditional RxJS-based methods. In this post, we’ll compare the use of RxJS with signal() for managing data updates, specifically focusing on updating user information upon login or logout.
The following example uses the @let syntax, which was introduced in Angular 18.
Using RxJS to Update Data 1. Define the Subject To manage user data with RxJS, we often define a BehaviorSubject that will hold and emit the user data.</description></item><item><title>.NET 6 - Authentication and Authorization with JWT</title><link>https://inkychew.github.io/en-us/dotnet-jwt/</link><pubDate>Fri, 19 Apr 2024 09:00:00 +0000</pubDate><guid>https://inkychew.github.io/en-us/dotnet-jwt/</guid><description>產生公私鑰 Generate a key pair using OpenSSL</description></item><item><title>.NET 6 - Authentication and Authorization with JWT</title><link>https://inkychew.github.io/en-us/dotnet-jwt/</link><pubDate>Mon, 06 Feb 2023 14:52:09 +0000</pubDate><guid>https://inkychew.github.io/en-us/dotnet-jwt/</guid><description>In this article, we will use .NET 6 to authenticate and authorize user with JWT in role based. Design Authenticate user and generate JWT. Pass JWT in each request. Validate JWT. Authorize Implementaion 1. Models User public class User { public int UserId { get; set; } public string UserName { get; set; } public string Password { get; set; } public UserRole Role { get; set; } public string?</description></item><item><title>Angular - Add loading spinner</title><link>https://inkychew.github.io/en-us/angular-loading-spinner/</link><pubDate>Sat, 04 Feb 2023 11:24:13 +0000</pubDate><guid>https://inkychew.github.io/en-us/angular-loading-spinner/</guid><description>Use Rxjs and Interceptor to show and hide loading spinner in Angular when processing API.
The technique is same as building a lightbox effect Modal.
Implementation Add service Generate service through command ng g s loading loading.service.ts private _loading = new BehaviorSubject&amp;lt;boolean&amp;gt;(false); public readonly $loading = this._loading.asObservable(); show() { this._loading.next(true); } hide() { this._loading.next(false); } Add component Generate component through command ng g c loading
loading.component.html
Show the loader only when loading$ is true.</description></item><item><title>.NET 6 - Operate database by EFCore</title><link>https://inkychew.github.io/en-us/dotnet-connectdb/</link><pubDate>Tue, 03 Jan 2023 09:00:00 +0000</pubDate><guid>https://inkychew.github.io/en-us/dotnet-connectdb/</guid><description>The Entity Framework (ADO.NET Entity Framework) is a set of technologies in ADO.NET. In the following article, I will introduce two methods, Database first and Code first, to Connect SQL Server DB in ASP.NET6 Web API by Entity Framework Core. Either one can achieve our goal. Let&amp;rsquo;s start!
DB First Add Model
Package required Open Package Manager Console Use Scaffold-DbContext to generate code for a DbContext and entity types from database.</description></item><item><title>About</title><link>https://inkychew.github.io/en-us/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://inkychew.github.io/en-us/about/</guid><description>Hi, I&amp;rsquo;m Inky from Taiwan, born in 1999. I am currently working as a software engineer and specialize in web design.
Skill System analysis Database design Web development Frontend: Angular2 Backend: .NET6 App development Android studio English Certificate 2022 - TOEIC 925 2020 - TOEFL iBT 80 2018 - TOEIC 825 2018 - GEPT Intermediate contact me</description></item></channel></rss>