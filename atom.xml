<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Becomegood Code World</title>
  
  <subtitle>Inky&#39;s sharing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://InkyChew.github.io/"/>
  <updated>2020-12-25T01:55:08.909Z</updated>
  <id>https://InkyChew.github.io/</id>
  
  <author>
    <name>InkyChew</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bubble sort</title>
    <link href="https://InkyChew.github.io/2020/12/24/algo-sort-bubble/"/>
    <id>https://InkyChew.github.io/2020/12/24/algo-sort-bubble/</id>
    <published>2020-12-24T14:19:30.000Z</published>
    <updated>2020-12-25T01:55:08.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bubble-sort-氣泡排序法"><a href="#Bubble-sort-氣泡排序法" class="headerlink" title="Bubble sort 氣泡排序法"></a>Bubble sort 氣泡排序法</h1><p><img src="https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2014/02/bubble-sort1.png" alt></p><p>每一次比較兩個相鄰數值，如果前面的數值大於後面的數值就交換位置，以確保最大的數值在最後一個位置。因為已經確保最大數值的位置，因此下一次需要比較的數值會少一個。</p><a id="more"></a><p>將以上的敘述拆解:</p><ol><li><p>每一次比較兩個相鄰元素<br>思考要比較幾次?<br>假設有五個數值，兩兩相比需比較四次。我們可以用<code>arr.length-1</code>表示。<br> <img src="https://upload.cc/i1/2020/12/24/lv8WzX.jpg" alt="兩相鄰元素比較次數"><br> 兩相鄰元素比較次數 = 總元素數量-1 </p></li><li><p>下一次需要比較的元素會少一個<br>第0次比較兩個相鄰元素，( 總元素數量-0 )-1個數值<br>第1次比較兩個相鄰元素，( 總元素數量-1 )-1個數值<br>第2次比較兩個相鄰元素，( 總元素數量-2 )-1個數值<br>…<br>第<code>i</code>次比較兩個相鄰元素，<code>arr.length-i-1</code>個數值  </p></li><li><p>如果前面的數值大於後面的數值就交換位置，以確保最大的數值在最後一個位置</p></li></ol><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>; i++) &#123;        <span class="hljs-comment">// 1.</span></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length-i-<span class="hljs-number">1</span>; j++) &#123;    <span class="hljs-comment">// 2.</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j+<span class="hljs-number">1</span>]) &#123;                    <span class="hljs-comment">// 3.</span></span><br><span class="line">      <span class="hljs-keyword">int</span> temp = arr[j];</span><br><span class="line">      arr[j] = arr[j+<span class="hljs-number">1</span>];</span><br><span class="line">      arr[j+<span class="hljs-number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Time complexity: O(n*n)<br>上述的程式碼缺乏效率，儘管陣列中所有的元素都已經排序完成，程式依然執行<code>n*n</code>次。  </p><p>觀察下方的圖片幫助理解<br><img src="https://upload.cc/i1/2020/12/25/qdKZOe.jpg" alt="缺乏效率的bubble sort"><br>我們可以發現執行第6次時就已經完成排序，但卻執行了10次</p><h2 id="Optimized-implementation"><a href="#Optimized-implementation" class="headerlink" title="Optimized implementation"></a>Optimized implementation</h2><p>如何知道所有的元素已經排序完成?<br>當兩相鄰元素的交換不再發生時，即完成所有元素的排序</p><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length-<span class="hljs-number">1</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">boolean</span> swapped = <span class="hljs-keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; arr.length-i-<span class="hljs-number">1</span>; j++) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (arr[j] &lt; arr[j+<span class="hljs-number">1</span>]) &#123;</span><br><span class="line">      <span class="hljs-keyword">int</span> temp = arr[j];</span><br><span class="line">      arr[j] = arr[j+<span class="hljs-number">1</span>];</span><br><span class="line">      arr[j+<span class="hljs-number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// 當有交換發生時，將swapped設成true</span></span><br><span class="line">      swapped = <span class="hljs-keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 當兩相鄰元素的交換不再發生時</span></span><br><span class="line">  <span class="hljs-comment">// 所有元素排序完成</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (swapped == <span class="hljs-keyword">false</span>)</span><br><span class="line">    <span class="hljs-keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Time-complexity"><a href="#Time-complexity" class="headerlink" title="Time complexity"></a>Time complexity</h3><p>Worst case: O(n*n)<br>所需執行時間的最壞情況，發生在陣列當中的元素以反向排序時<br>Best case: O(n)<br>所需執行時間的最佳情況，發生在陣列當中的元素已經排序好時</p><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://www.geeksforgeeks.org/bubble-sort/" target="_blank" rel="noopener">geeksforgeeks-Bubble sort</a><br><a href="https://pjchender.blogspot.com/2017/09/bubble-sort.html" target="_blank" rel="noopener">[演算法] 氣泡排序法 Bubble Sort</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Bubble-sort-氣泡排序法&quot;&gt;&lt;a href=&quot;#Bubble-sort-氣泡排序法&quot; class=&quot;headerlink&quot; title=&quot;Bubble sort 氣泡排序法&quot;&gt;&lt;/a&gt;Bubble sort 氣泡排序法&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://media.geeksforgeeks.org/wp-content/cdn-uploads/gq/2014/02/bubble-sort1.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;每一次比較兩個相鄰數值，如果前面的數值大於後面的數值就交換位置，以確保最大的數值在最後一個位置。因為已經確保最大數值的位置，因此下一次需要比較的數值會少一個。&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://InkyChew.github.io/categories/Notes/"/>
    
      <category term="Algorithm" scheme="https://InkyChew.github.io/categories/Notes/Algorithm/"/>
    
    
      <category term="algorithm" scheme="https://InkyChew.github.io/tags/algorithm/"/>
    
      <category term="sorting" scheme="https://InkyChew.github.io/tags/sorting/"/>
    
  </entry>
  
  <entry>
    <title>algo</title>
    <link href="https://InkyChew.github.io/2020/12/24/algo/"/>
    <id>https://InkyChew.github.io/2020/12/24/algo/</id>
    <published>2020-12-24T09:56:54.000Z</published>
    <updated>2020-12-25T01:52:39.047Z</updated>
    
    <content type="html"><![CDATA[<p>Algorithm演算法系列文章<br><a href="https://inkychew.github.io/2020/12/23/algo-timeComplexity/">時間複雜度（Time Complexity）&amp; big-O</a><br>空間複雜度</p><ol><li>資料結構的各項操作</li><li>排序（Sorting）：<ul><li><a href="http://localhost:4000/2020/12/24/algo-sort-bubble/" target="_blank" rel="noopener">Bubble sort</a></li><li>Insertion sort</li><li>Quick sort</li><li>Merge sort</li></ul></li><li>搜尋（Searching）<ul><li>Depth-first-search</li><li>Breadth-first-search</li><li>Binary search  </li></ul></li></ol><p><a href="https://inkychew.github.io/2020/12/11/recursion/">遞迴（recursive）</a><br>分治法（divide and conquer）<br>迭代（iteration）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Algorithm演算法系列文章&lt;br&gt;&lt;a href=&quot;https://inkychew.github.io/2020/12/23/algo-timeComplexity/&quot;&gt;時間複雜度（Time Complexity）&amp;amp; big-O&lt;/a&gt;&lt;br&gt;空間複雜度&lt;/
      
    
    </summary>
    
      <category term="Notes" scheme="https://InkyChew.github.io/categories/Notes/"/>
    
      <category term="Algorithm" scheme="https://InkyChew.github.io/categories/Notes/Algorithm/"/>
    
    
      <category term="algorithm" scheme="https://InkyChew.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Time Complexity</title>
    <link href="https://InkyChew.github.io/2020/12/23/algo-timeComplexity/"/>
    <id>https://InkyChew.github.io/2020/12/23/algo-timeComplexity/</id>
    <published>2020-12-23T11:48:38.000Z</published>
    <updated>2020-12-24T09:53:09.780Z</updated>
    
    <content type="html"><![CDATA[<p>在寫程式時，同一個問題，可以有多個不同的解法，因此我們需要衡量不同方法的時間與空間複雜度，以找到最佳的解法。在現代，儲存空間已經不是太大的問題，因此我們關注程式的效率，也就是演算法的時間複雜度(Time Complexity)。  </p><h1 id="Time-Complexity-時間複雜度"><a href="#Time-Complexity-時間複雜度" class="headerlink" title="Time Complexity 時間複雜度"></a>Time Complexity 時間複雜度</h1><p><strong>隨著輸入資料量的增加，執行時間的變化</strong><br>使用Asymptotic Notation表示時間複雜度。</p><h2 id="Asymptotic-Notation-漸近符號"><a href="#Asymptotic-Notation-漸近符號" class="headerlink" title="Asymptotic Notation 漸近符號"></a>Asymptotic Notation 漸近符號</h2><ul><li>Big-O ( Ο ): 以<code>Ο()</code>表示演算法所需執行時間的最<strong>壞</strong>情況</li><li>Omega ( Ω ): 以<code>Ω()</code>表示演算法所需執行時間的最<strong>佳</strong>情況</li><li>Theta ( θ ): 以<code>θ()</code>表示演算法所需執行時間的<strong>範圍</strong>，包含了最壞與最佳情況</li></ul><p>時間複雜度所需執行時間，由短到長:<br><code>1(常數)</code> &lt; <code>log n</code> &lt; <code>n</code> &lt; <code>n log n</code> &lt; <code>n^2</code> &lt; <code>2^n</code> &lt; <code>n!</code></p><a id="more"></a><h2 id="以Big-O表示時間複雜度的四種常見類型"><a href="#以Big-O表示時間複雜度的四種常見類型" class="headerlink" title="以Big-O表示時間複雜度的四種常見類型"></a>以Big-O表示時間複雜度的四種常見類型</h2><h3 id="1-Constant-Run-Time-O-1"><a href="#1-Constant-Run-Time-O-1" class="headerlink" title="1. Constant Run Time (O(1))"></a>1. Constant Run Time (O(1))</h3><p>不管資料量大小，執行時間都<strong>一樣</strong>。</p><p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]</span><br><span class="line"><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">constant</span>(<span class="hljs-params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 不管傳入arr或arr2，執行次數皆為一次。</span></span><br></pre></td></tr></table></figure></p><h3 id="2-Logarithmic-Run-Time-O-log-n"><a href="#2-Logarithmic-Run-Time-O-log-n" class="headerlink" title="2. Logarithmic Run Time (O(log n))"></a>2. Logarithmic Run Time (O(log n))</h3><p>隨著資料量增加，執行時間<strong>趨緩</strong>。<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">while</span>(n &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">  n = n / <span class="hljs-number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/** var n = 10  </span></span><br><span class="line"><span class="hljs-comment">  * n -&gt; 10, 5, 2, 1, 0  </span></span><br><span class="line"><span class="hljs-comment">  * var n = 15  </span></span><br><span class="line"><span class="hljs-comment">  * n -&gt; 7, 3, 1, 0</span></span><br><span class="line"><span class="hljs-comment">  **/</span></span><br></pre></td></tr></table></figure></p><h3 id="3-Linear-Run-Time-O-n"><a href="#3-Linear-Run-Time-O-n" class="headerlink" title="3. Linear Run Time (O(n))"></a>3. Linear Run Time (O(n))</h3><p>隨著資料量增加，執行時間成<strong>線性等比例</strong>成長。<br><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 執行次數為n次</span></span><br></pre></td></tr></table></figure></p><h3 id="4-Exponential-Run-Time-O-n-2"><a href="#4-Exponential-Run-Time-O-n-2" class="headerlink" title="4. Exponential Run Time (O(n^2))"></a>4. Exponential Run Time (O(n^2))</h3><p>隨著資料量增加，執行時間成<strong>指數成長</strong>。<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">  <span class="hljs-keyword">for</span>(int j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 執行次數為n*n次</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/KdyjYI5.png" alt="Big O Notation"></p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://medium.com/@yunyubee/%E6%BC%94%E7%AE%97%E6%B3%95-big-o-and-time-complexity-65f2dfafe9d1" target="_blank" rel="noopener">[演算法] Big O and Time Complexity</a><br><a href="https://pjchender.blogspot.com/2017/09/big-o-notation-time-complexity.html" target="_blank" rel="noopener">[演算法] Big O Notation &amp; Time Complexity</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在寫程式時，同一個問題，可以有多個不同的解法，因此我們需要衡量不同方法的時間與空間複雜度，以找到最佳的解法。在現代，儲存空間已經不是太大的問題，因此我們關注程式的效率，也就是演算法的時間複雜度(Time Complexity)。  &lt;/p&gt;
&lt;h1 id=&quot;Time-Complexity-時間複雜度&quot;&gt;&lt;a href=&quot;#Time-Complexity-時間複雜度&quot; class=&quot;headerlink&quot; title=&quot;Time Complexity 時間複雜度&quot;&gt;&lt;/a&gt;Time Complexity 時間複雜度&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;隨著輸入資料量的增加，執行時間的變化&lt;/strong&gt;&lt;br&gt;使用Asymptotic Notation表示時間複雜度。&lt;/p&gt;
&lt;h2 id=&quot;Asymptotic-Notation-漸近符號&quot;&gt;&lt;a href=&quot;#Asymptotic-Notation-漸近符號&quot; class=&quot;headerlink&quot; title=&quot;Asymptotic Notation 漸近符號&quot;&gt;&lt;/a&gt;Asymptotic Notation 漸近符號&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Big-O ( Ο ): 以&lt;code&gt;Ο()&lt;/code&gt;表示演算法所需執行時間的最&lt;strong&gt;壞&lt;/strong&gt;情況&lt;/li&gt;
&lt;li&gt;Omega ( Ω ): 以&lt;code&gt;Ω()&lt;/code&gt;表示演算法所需執行時間的最&lt;strong&gt;佳&lt;/strong&gt;情況&lt;/li&gt;
&lt;li&gt;Theta ( θ ): 以&lt;code&gt;θ()&lt;/code&gt;表示演算法所需執行時間的&lt;strong&gt;範圍&lt;/strong&gt;，包含了最壞與最佳情況&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;時間複雜度所需執行時間，由短到長:&lt;br&gt;&lt;code&gt;1(常數)&lt;/code&gt; &amp;lt; &lt;code&gt;log n&lt;/code&gt; &amp;lt; &lt;code&gt;n&lt;/code&gt; &amp;lt; &lt;code&gt;n log n&lt;/code&gt; &amp;lt; &lt;code&gt;n^2&lt;/code&gt; &amp;lt; &lt;code&gt;2^n&lt;/code&gt; &amp;lt; &lt;code&gt;n!&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://InkyChew.github.io/categories/Notes/"/>
    
      <category term="Algorithm" scheme="https://InkyChew.github.io/categories/Notes/Algorithm/"/>
    
    
      <category term="algorithm" scheme="https://InkyChew.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Design pattern - Factory method</title>
    <link href="https://InkyChew.github.io/2020/12/20/oo-dp-factory/"/>
    <id>https://InkyChew.github.io/2020/12/20/oo-dp-factory/</id>
    <published>2020-12-20T01:49:48.000Z</published>
    <updated>2020-12-24T09:49:07.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Factory-method"><a href="#Factory-method" class="headerlink" title="Factory method"></a>Factory method</h1><blockquote><p>Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses. </p></blockquote><p><img src="https://upload.cc/i1/2020/12/23/oZfYJH.jpg" alt="Factory method"><br>一間工廠(creator)只專門生產一種產品(product)。</p><a id="more"></a><h2 id="Use-when"><a href="#Use-when" class="headerlink" title="Use when"></a>Use when</h2><blockquote><ul><li>a class can’t anticipate the class of objects it must create.</li><li>a class wants its subclasses to specify the objects it creates.</li><li>classes delegate responsibility to one of several helper subclasses, and you want<br>to localize the knowledge of which helper subclass is the delegate.</li></ul></blockquote><p>優點:  </p><ol><li>得以讓被create的product在run time的時候才決定  </li><li>得以明確知道哪一個Creator create 哪一個Product</li><li>得以在superclass建立hooks，為subclass提供default method  </li><li>Connects parallel class hierarchies，creator delegate some of its responsibility to its product.<br>例如:長條圖與折線圖都會用到getData()，但繪製的方式不同。長條圖以棒狀呈現，折線圖以線呈現，這時候creator就可以委託product做變化。<hr></li></ol><p>在<a href="https://inkychew.github.io/2020/12/17/oo-dp-observer">observer</a>中提到spreadsheet create chart可以使用factory method。</p><p>spreadsheet不需要綁定特定的chart<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">spreadSheet</span> </span>&#123;</span><br><span class="line">  ArrayList&lt;chart&gt; charts = <span class="hljs-keyword">new</span> ArrayList&lt;Chart&gt;();</span><br><span class="line">  <span class="hljs-keyword">private</span> chartFactory factory;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attach</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    factory = configure(); <span class="hljs-comment">// 要使用哪間工廠</span></span><br><span class="line">    Chart chart = factory.createChart(type);</span><br><span class="line">    charts.add(chart);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Creator</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">chartFactory</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> Chart <span class="hljs-title">createChart</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">barChartFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">spreadSheet</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> Chart <span class="hljs-title">createChart</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> barChart();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lineChartFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">spreadSheet</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> Chart <span class="hljs-title">createChart</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> lineChart();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>缺點:</p><ol><li>有很多的creator，只是為了create product</li><li>client必須判斷要使用哪一個creator</li></ol><p>Factory method與<a href>Abstract factory</a>很像，但Abstract factory強調組合的關係。通常在使用Abstract factory的同時，會使用Factory method。</p><h1 id="Simple-factory"><a href="#Simple-factory" class="headerlink" title="Simple factory"></a>Simple factory</h1><p>只有一間工廠，客戶指定要什麼就生產什麼。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">spreadSheet</span> </span>&#123;</span><br><span class="line">  ArrayList&lt;chart&gt; charts = <span class="hljs-keyword">new</span> ArrayList&lt;Chart&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Chart <span class="hljs-title">createChart</span><span class="hljs-params">(String type)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attach</span><span class="hljs-params">(String type)</span> </span>&#123;</span><br><span class="line">    Chart chart = chartFactory.createChart(type);</span><br><span class="line">    charts.add(chart);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">chartFactory</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Chart <span class="hljs-title">createChart</span><span class="hljs-params">(String type)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">switch</span>(type) &#123;</span><br><span class="line">      <span class="hljs-keyword">case</span> <span class="hljs-string">"bar"</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> barChart();</span><br><span class="line">      <span class="hljs-keyword">case</span> <span class="hljs-string">"line"</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> lineChart();</span><br><span class="line">      <span class="hljs-keyword">default</span>:</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> barChart();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://stackoverflow.com/questions/53372254/simple-factory-vs-factory-method" target="_blank" rel="noopener">Simple factory vs Factory method</a><br>Use SimpleFactory when the types of Objects are <strong>not fixed.</strong><br>Use Factory method when the types of Objects are fixed.<br>當決定好class的數量，使用Factory method。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Factory-method&quot;&gt;&lt;a href=&quot;#Factory-method&quot; class=&quot;headerlink&quot; title=&quot;Factory method&quot;&gt;&lt;/a&gt;Factory method&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.cc/i1/2020/12/23/oZfYJH.jpg&quot; alt=&quot;Factory method&quot;&gt;&lt;br&gt;一間工廠(creator)只專門生產一種產品(product)。&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://InkyChew.github.io/categories/Notes/"/>
    
      <category term="OOSE" scheme="https://InkyChew.github.io/categories/Notes/OOSE/"/>
    
    
      <category term="Design pattern" scheme="https://InkyChew.github.io/tags/Design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>Design pattern - Observer</title>
    <link href="https://InkyChew.github.io/2020/12/17/oo-dp-observer/"/>
    <id>https://InkyChew.github.io/2020/12/17/oo-dp-observer/</id>
    <published>2020-12-17T12:52:34.000Z</published>
    <updated>2020-12-23T11:34:10.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h1><blockquote><p>Define a one-to-many dependency between objects so that when one object changes state, all its depends are notified and updated automatically.</p></blockquote><p>maintain consistency without tightly coupled to increase reusablity.<br>當兩個object間的資訊需要同步更新的時候，透過observer pattern維護資訊的一致性，並降低之間的coupling。</p><p><img src="https://upload.cc/i1/2020/12/20/2ZVvLd.jpg" alt="Observer"></p><a id="more"></a><p>以Youtube為例<br>使用Youtube時，使用者對喜歡的youtuber按下訂閱，當該Youtuber發布最新的影片時，使用者就可以收到該Youtuber最新的影片。</p><p>When subject changed, notify all observers to update.<br>But… </p><h2 id="Who-triggers-the-update"><a href="#Who-triggers-the-update" class="headerlink" title="Who triggers the update()?"></a>Who triggers the update()?</h2><p>狀態更新可以透過兩種方式，各有優缺點 </p><ol><li>Client call Notify<br>client forgot to call  </li><li>Observer call Notify<br>inefficient</li></ol><h3 id="1-Client-call-Notify"><a href="#1-Client-call-Notify" class="headerlink" title="1. Client call Notify"></a>1. Client call Notify</h3><p>想像使用Youtube時，當使用者對喜歡的youtuber按下訂閱，則觸發addSubscriber將此使用者新增到Youtuber的subscribers List中。<br>當youtuber上傳最新影片時，觸發uploadVideo，通知所有訂閱者(observers)該youtuber(subject)最新的影片。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Subject</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Youtuber</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">private</span> ArrayList&lt;Subscriber&gt; subscribers = <span class="hljs-keyword">new</span> ArrayList&lt;Subscriber&gt;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attach</span><span class="hljs-params">(Subscriber sub)</span> </span>&#123;</span><br><span class="line">    subscribers.add(sub);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">detach</span><span class="hljs-params">(Subscriber sub)</span> </span>&#123;</span><br><span class="line">    subscribers.remove(sub);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span> (sub : subscribers) &#123;</span><br><span class="line">      sub.update(<span class="hljs-keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">concreteYoutuber</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Youtuber</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">private</span> Video video;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setVideo</span><span class="hljs-params">(Video v)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.video = v;</span><br><span class="line">    <span class="hljs-keyword">this</span>.notify();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getVideo</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> video;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Observer</span></span><br><span class="line">Interface Subscriber &#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Youtuber ytb)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">concreteSubscriber</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Subscriber</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">private</span> Video video;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(Youtuber ytb)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.video = ytb.getVideo();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Client</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Controller</span> </span>&#123;</span><br><span class="line">  Youtuber rdEnglish = <span class="hljs-keyword">new</span> concreteYoutuber();</span><br><span class="line">  <span class="hljs-comment">// when user click the subscribe button</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addSubscriber</span><span class="hljs-params">(Subscriber subscriber)</span> </span>&#123;</span><br><span class="line">    rdEnglish.attach(subscriber);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// when youtuber upload video then notify all subscribers</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">uploadVideo</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    rdEnglish.setVideo(video);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2-Observer-call-Notify"><a href="#2-Observer-call-Notify" class="headerlink" title="2. Observer call Notify"></a>2. Observer call Notify</h3><p>想像在Excel中，為一張試算表的資料繪製一張長條圖與折線圖。按下新增圖表，觸發attach方法，以建立圖表。(可以透過<a href>Factory method</a>建立不同的圖表)<br>當改變試算表中的資料時，觸發setData，並呼叫Notify以同步更新其他圖表的資料。<br>當改變圖表中的資料時，觸法setChartData，呼叫sheet的setData方法更新試算表的資料，並呼叫Notify同步更新其他圖表的資料。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Subject</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">spreadSheet</span> </span>&#123;</span><br><span class="line">  ArrayList&lt;chart&gt; charts = <span class="hljs-keyword">new</span> ArrayList&lt;Chart&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">attach</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    Chart chart = <span class="hljs-keyword">new</span> Chart();</span><br><span class="line">    charts.add(chart);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">detach</span><span class="hljs-params">(Chart chart)</span> </span>&#123;</span><br><span class="line">    charts.remove(chart);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Notify</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">for</span>(c : charts) &#123;</span><br><span class="line">      c.update(<span class="hljs-keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">concreteSpreadSheet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">spreadSheet</span> </span>&#123;</span><br><span class="line">  Data data = <span class="hljs-keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">setData</span><span class="hljs-params">(Data newData)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.data = newData;</span><br><span class="line">    <span class="hljs-keyword">this</span>.Notify();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> Data <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// Observer</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Chart</span> </span>&#123;</span><br><span class="line">  spreadSheet sheet;</span><br><span class="line">  Data data;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(spreadSheet sheet)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.sheet = sheet;</span><br><span class="line">    <span class="hljs-keyword">this</span>.data = sheet.getData();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setChartData</span> <span class="hljs-params">(Data newData)</span> </span>&#123;</span><br><span class="line">    sheet.setData(newData);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    sheet.detach(<span class="hljs-keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">barChart</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Chart</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">lineChart</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Chart</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Pros-and-Cons"><a href="#Pros-and-Cons" class="headerlink" title="Pros and Cons"></a>Pros and Cons</h1><p>Pros:</p><ol><li>Coupling between subjects and observers is abstract and minimal. </li><li>Subject and Observer can vary independently. </li></ol><p>Subject不需要知道要更新哪些Observer。兩者可獨立的變化，提高複用性。 </p><p>Cons:</p><ol><li>Unexpected updates.  </li></ol><p>Observer不需要知道其他的Observer。雖然降低coupling，但可能造成資訊更新難以追蹤，資訊更新錯誤的問題。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Observer&quot;&gt;&lt;a href=&quot;#Observer&quot; class=&quot;headerlink&quot; title=&quot;Observer&quot;&gt;&lt;/a&gt;Observer&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Define a one-to-many dependency between objects so that when one object changes state, all its depends are notified and updated automatically.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;maintain consistency without tightly coupled to increase reusablity.&lt;br&gt;當兩個object間的資訊需要同步更新的時候，透過observer pattern維護資訊的一致性，並降低之間的coupling。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.cc/i1/2020/12/20/2ZVvLd.jpg&quot; alt=&quot;Observer&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://InkyChew.github.io/categories/Notes/"/>
    
      <category term="OOSE" scheme="https://InkyChew.github.io/categories/Notes/OOSE/"/>
    
    
      <category term="Design pattern" scheme="https://InkyChew.github.io/tags/Design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>遞迴與迴圈</title>
    <link href="https://InkyChew.github.io/2020/12/11/recursion/"/>
    <id>https://InkyChew.github.io/2020/12/11/recursion/</id>
    <published>2020-12-11T04:29:27.000Z</published>
    <updated>2020-12-14T14:12:55.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="遞迴-Recursion"><a href="#遞迴-Recursion" class="headerlink" title="遞迴 Recursion"></a>遞迴 Recursion</h1><p>以求N的階乘為例<br>fac(1) = 1<br>fac(N) = N * fac(N-1)</p><h2 id="內涵式遞迴-Embedded-recursion"><a href="#內涵式遞迴-Embedded-recursion" class="headerlink" title="內涵式遞迴 Embedded recursion"></a>內涵式遞迴 Embedded recursion</h2><ul><li>最後一個函式fac(1)呼叫完成後，一層層<strong>由內而外回傳</strong>數值並計算。</li><li>階層式架構</li></ul><a id="more"></a><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fac</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-comment">// 設定終止條件</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">else</span></span><br><span class="line">    <span class="hljs-keyword">return</span> n * fac(n-<span class="hljs-number">1</span>); <span class="hljs-comment">// 控制變數 n，使其接近終止值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>fac(3)<br>return 3 * <code>fac(3-1)</code>       // n=3<br>return 3 * <code>2 * fac(2-1)</code>    // n=2<br>return 3 * 2 * <code>1 * fac(1)</code>   // n=1  </p><h2 id="尾端式遞迴-Tail-recursion"><a href="#尾端式遞迴-Tail-recursion" class="headerlink" title="尾端式遞迴 Tail recursion"></a>尾端式遞迴 Tail recursion</h2><ul><li>增加一個參數(ans)，紀錄累乘值。</li><li>平的架構</li></ul><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fac</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> ans)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-comment">//設定終止條件</span></span><br><span class="line">    <span class="hljs-keyword">return</span> ans;</span><br><span class="line">  <span class="hljs-keyword">else</span></span><br><span class="line">    <span class="hljs-keyword">return</span> fac(n-<span class="hljs-number">1</span>, ans*n); <span class="hljs-comment">// 控制變數 n，使其接近終止值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>fac(3, 1)<br>return fac(2, 1*3)<br>return fac(1, 3*2)<br>return fac(0, 6*1)  </p><p>可以將尾端式遞迴轉換成While迴圈</p><h1 id="迴圈-Loop"><a href="#迴圈-Loop" class="headerlink" title="迴圈 Loop"></a>迴圈 Loop</h1><ol><li>將尾端式遞迴的終止條件，以not的形式當作while的進行條件。</li><li>將參數的變動放在迴圈中，必須先累乘，才將n-1。</li></ol><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fac</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> ans = <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 設定進行條件</span></span><br><span class="line">    ans = ans * n;</span><br><span class="line">    n--; <span class="hljs-comment">// 控制變數 n，使迴圈得以停止</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;遞迴-Recursion&quot;&gt;&lt;a href=&quot;#遞迴-Recursion&quot; class=&quot;headerlink&quot; title=&quot;遞迴 Recursion&quot;&gt;&lt;/a&gt;遞迴 Recursion&lt;/h1&gt;&lt;p&gt;以求N的階乘為例&lt;br&gt;fac(1) = 1&lt;br&gt;fac(N) = N * fac(N-1)&lt;/p&gt;
&lt;h2 id=&quot;內涵式遞迴-Embedded-recursion&quot;&gt;&lt;a href=&quot;#內涵式遞迴-Embedded-recursion&quot; class=&quot;headerlink&quot; title=&quot;內涵式遞迴 Embedded recursion&quot;&gt;&lt;/a&gt;內涵式遞迴 Embedded recursion&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最後一個函式fac(1)呼叫完成後，一層層&lt;strong&gt;由內而外回傳&lt;/strong&gt;數值並計算。&lt;/li&gt;
&lt;li&gt;階層式架構&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://InkyChew.github.io/categories/Notes/"/>
    
    
      <category term="Java" scheme="https://InkyChew.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>物件導向的五大原則</title>
    <link href="https://InkyChew.github.io/2020/12/10/oo-principle/"/>
    <id>https://InkyChew.github.io/2020/12/10/oo-principle/</id>
    <published>2020-12-10T01:32:08.000Z</published>
    <updated>2020-12-23T11:34:10.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SOLID-原則"><a href="#SOLID-原則" class="headerlink" title="SOLID 原則"></a>SOLID 原則</h1><h2 id="1-SRP-Single-Responsibility-Principle"><a href="#1-SRP-Single-Responsibility-Principle" class="headerlink" title="1. SRP (Single Responsibility Principle)"></a>1. SRP (Single Responsibility Principle)</h2><blockquote><p>一個class只對一種role(actor)負責。</p></blockquote><a id="more"></a><p>以電子支付為例，使用者可以收付款項。建立一個User class，包含收錢與付錢兩個方法。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"收錢"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pay</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"付錢"</span>);</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>當userA要付錢給userB，我們可能會這麼寫<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span> <span class="hljs-params">(string[] args)</span> </span>&#123;</span><br><span class="line">  User userA = <span class="hljs-keyword">new</span> User();</span><br><span class="line">  User userB = <span class="hljs-keyword">new</span> User();</span><br><span class="line">  userA.pay();</span><br><span class="line">  userB.receive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在<a href="https://medium.com/@f40507777/%E5%96%AE%E4%B8%80%E8%81%B7%E8%B2%AC%E5%8E%9F%E5%89%87-single-responsibility-principle-7b4eb03f1fff" target="_blank" rel="noopener">作者Finn-SRP</a>這篇文章中提到:</p><blockquote><p>如果兩個方法的連動永遠都是同時變化，那就不必分離，否則可能造成不必要的複雜性。</p></blockquote><p>提醒我們需避免過度優化，將功能切割的過於細小，而使程式過於複雜。</p><p>上面的程式似乎符合同時的連動與變化，還算容易理解與維護，但功能增加或需要修改時，可能就不太理想了。<br>我們試著增加一些功能: 收款方，顯示QRcode，付款方掃描並驗證其QRcode後，輸入支付金額。收款方確認支付金額無誤後，才完成交易。並且雙方在交易完成後都能有現金5%的回饋。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.showQRcode();</span><br><span class="line">    <span class="hljs-keyword">this</span>.verifyInputMoney();</span><br><span class="line">    <span class="hljs-keyword">this</span>.cashBonus();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showQRcode</span><span class="hljs-params">()</span></span>&#123;...&#125;;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">verifyInputMoney</span><span class="hljs-params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pay</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.openCamera();</span><br><span class="line">    <span class="hljs-keyword">this</span>.verifyQRcode();</span><br><span class="line">    <span class="hljs-keyword">int</span> money = scanner.NextInt();</span><br><span class="line">    <span class="hljs-keyword">this</span>.cashBonus();</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openCamera</span><span class="hljs-params">()</span></span>&#123;...&#125;;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">verifyQRcode</span><span class="hljs-params">()</span></span>&#123;...&#125;;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cashBonus</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    balance = balance + money*<span class="hljs-number">5</span>%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>若今天將政策改成付款方享有10%的現金回饋，而收款方現金回饋5%保持不變，問題就浮現了。</p><p>User class中的方法，同時對兩個actor負責。一個是付款方(payer)，另一個是收款方(payee)。因此建立兩個新的class，並將method切割出來，以實現RSP原則(一個class只對一個actor負責)。也能避免日後需求改變，修改方法(cashBonus)時，更動到其他角色應該有的正確行為。<br><code>RSP原則，提高class的cohesion，使其易於維護與修改。</code></p><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Payee</span></span>&#123; <span class="hljs-comment">// 收款方</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.showQRcode();</span><br><span class="line">    <span class="hljs-keyword">this</span>.verifyInputMoney();</span><br><span class="line">    System.out.println(<span class="hljs-string">"收錢"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">showQRcode</span><span class="hljs-params">()</span></span>&#123;...&#125;;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">verifyInputMoney</span><span class="hljs-params">()</span></span>&#123;...&#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cashBonus</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    balance = balance + money*<span class="hljs-number">5</span>%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Payer</span></span>&#123; <span class="hljs-comment">// 付款方</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pay</span><span class="hljs-params">()</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.openCamera();</span><br><span class="line">    <span class="hljs-keyword">this</span>.verifyQRcode();</span><br><span class="line">    <span class="hljs-keyword">int</span> money = scanner.NextInt();</span><br><span class="line">    System.out.println(<span class="hljs-string">"付錢"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openCamera</span><span class="hljs-params">()</span></span>&#123;...&#125;;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">verifyQRcode</span><span class="hljs-params">()</span></span>&#123;...&#125;;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cashBonus</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    balance = balance + money*<span class="hljs-number">10</span>%;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-OCP-Open-Closed-Principle"><a href="#2-OCP-Open-Closed-Principle" class="headerlink" title="2. OCP (Open-Closed Principle)"></a>2. OCP (Open-Closed Principle)</h2><p>在設計已經完整的前提下，修改程式的兩個主要原因為:  </p><ol><li>增加新功能</li><li>修正問題(bugs)  </li></ol><p>若修改程式是為了<strong>增加新功能</strong>，就必須符合OCP原則。</p><ul><li>Open for extension 開放擴充</li><li>Closed for modification 避免修改</li></ul><p>達成OCP的方式:  </p><ol><li>Abstract class  </li><li>Interface   </li><li>Decorator  </li><li>Strategy  </li><li><a href="#5-DIP-Dependency-Inversion-Principle"><strong>DIP</strong></a></li></ol><h2 id="3-LSP-Liskov-Substitution-Priniple"><a href="#3-LSP-Liskov-Substitution-Priniple" class="headerlink" title="3. LSP (Liskov Substitution Priniple)"></a>3. LSP (Liskov Substitution Priniple)</h2><blockquote><p>Subtypes must be substitutable for their base types.  </p></blockquote><p>所有的subclass必須能夠在不破壞/不修改程式的情況下，使用parent class中的所有方法。</p><p>在實作OCP的同時，必須符合LSP。<br>以下為違反LSP的例子:<br>以哺乳類為例，除少數哺乳類，例如:鴨嘴獸(platypus)是卵生，其餘皆為胎生。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mammal</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">giveBirth</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 直接生下胎兒</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Platypus</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mammal</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">layegg</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// 產卵</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>class Platypus 無法使用class Mammal中的giveBirth method ，違反LSP原則。</p><p>extends 為 IS-A 的關係<br>Platypus cannot giveBirth. Thus, Platypus is not a Mammal, Platypus cannot extend Mammal.  </p><p>透過<a href="https://docs.oracle.com/cd/E19683-01/806-7930/assert-13/index.html" target="_blank" rel="noopener">Design by Contract</a>來避免違反LSP:</p><ol><li>preconditions</li><li>postconditions</li><li>class invariants  </li></ol><p>Subclasses need to follow these rules:</p><ol><li>Don’t implement any stricter validation rules on input parameters than implemented by the parent class.<br>父類別的條件要比子類別嚴格</li><li>Apply at the least the same rules to all output parameters as applied by the parent class.</li></ol><h2 id="4-ISP-Interface-Segregation-Principle"><a href="#4-ISP-Interface-Segregation-Principle" class="headerlink" title="4. ISP (Interface Segregation Principle)"></a>4. ISP (Interface Segregation Principle)</h2><blockquote><p>Clients should not be forced to depend upon interfaces that they do not use.</p></blockquote><p>以遙控器為例:<br>電視遙控器可以開，關，預錄節目。<br>冷氣遙控器可以開，關，設定溫度。<br>可以發現電視遙控器並不需要設定溫度的功能，冷氣遙控器並不需要預錄節目的功能。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RemoteControl</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">on</span><span class="hljs-params">()</span></span>;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">off</span><span class="hljs-params">()</span></span>;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">()</span></span>;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">record</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>為了預防 Bloated Interface，透過ISP原則，將Interface進行切割。<br>我們建立兩個新的Interface，TVRemote與AirConditionerRemote，將電視與冷氣個別會用到的功能切割出去。interface RemoteControl則保留最基本的遙控器開關功能。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">TVRemote</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setChannel</span><span class="hljs-params">()</span></span>;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">record</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AirConditionerRemote</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTemperature</span><span class="hljs-params">()</span></span>;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTime</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">RemoteControl</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">on</span><span class="hljs-params">()</span></span>;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">off</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ISP與SRP相似，主張Class或Interface<strong>不應該包含多種用不到的或不相關的責任</strong>。避免需求改變時，因程式修改所產生的負面影響。因此將Class或Interface切割，雖然Class或Interface的數量增加，但cohesion提高。<br>兩者之間的差異:  </p><ul><li>ISP避免<strong>Interface</strong>包含了client用不到的method</li><li>SRP避免一個<strong>Class</strong>負責不同的角色</li></ul><h2 id="5-DIP-Dependency-Inversion-Principle"><a href="#5-DIP-Dependency-Inversion-Principle" class="headerlink" title="5. DIP (Dependency Inversion Principle)"></a>5. DIP (Dependency Inversion Principle)</h2><blockquote><p>High-level modules should not depend on low-level modules. <strong>Both should depend on abstractions.</strong><br>Abstractions should not depend on details. Details should depend on abstractions.</p></blockquote><p>切割兩個Class之間的依賴關係，建立一個新的抽象介面(Abstraction)，讓Class更容易<code>擴充</code>(OCP)，同時也必須遵守(LSP)。只要持續且正確的應用OCP與LSP，將會符合DIP。<br>splits the dependency between the high-level and low-level modules by introducing an abstraction between them. So in the end, there are two dependencies:</p><ol><li>the high-level module depends on the abstraction, and</li><li>the low-level depends on the same abstraction.</li></ol><p>以Airplane為例，飛機可以在跑道上跑(run)，也可以飛到空中(fly)。Jet依賴於Airplane的run和fly功能，並且可以射擊(shoot)與防禦(defend)。<br><img src="https://upload.cc/i1/2020/12/14/R8K2Zq.jpg" alt="Before"><br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Airplane</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span> <span class="hljs-params">()</span> </span>&#123;...&#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span> <span class="hljs-params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Jet</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">private</span> Airplane airplane</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span> <span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    airplane.run();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fly</span> <span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    airplane.fly();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shoot</span> <span class="hljs-params">()</span> </span>&#123;...&#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">defend</span> <span class="hljs-params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>為了<strong>降低coupling</strong>(減少class之間的依賴關係)，並讓功能容易擴充避免修改(<strong>OCP</strong>)，建立Interface AirplaneAction，讓Airplane和Jet可以實作run和fly。由於Airplane並不能shoot和defend，因此新增一個軍備的Interface Arms，讓Jet實作shoot和defend，以遵守<strong>LSP</strong>。</p><p><img src="https://upload.cc/i1/2020/12/14/sF6TPy.jpg" alt="After"></p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><p><a href="https://www.thinkinmd.com/post/2020/03/06/oo-single-responsibility-principle/" target="_blank" rel="noopener">SRP</a><br><a href="http://teddy-chen-tw.blogspot.com/2011/12/2.html" target="_blank" rel="noopener">OCP</a><br><a href="https://medium.com/@f40507777/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8F%9B%E5%8E%9F%E5%89%87-liskov-substitution-principle-adc1650ada53" target="_blank" rel="noopener">LSP</a><br><a href="https://stackify.com/interface-segregation-principle/" target="_blank" rel="noopener">ISP</a><br><a href="http://teddy-chen-tw.blogspot.com/2012/01/5dependency-inversion-principle.html" target="_blank" rel="noopener">DIP</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SOLID-原則&quot;&gt;&lt;a href=&quot;#SOLID-原則&quot; class=&quot;headerlink&quot; title=&quot;SOLID 原則&quot;&gt;&lt;/a&gt;SOLID 原則&lt;/h1&gt;&lt;h2 id=&quot;1-SRP-Single-Responsibility-Principle&quot;&gt;&lt;a href=&quot;#1-SRP-Single-Responsibility-Principle&quot; class=&quot;headerlink&quot; title=&quot;1. SRP (Single Responsibility Principle)&quot;&gt;&lt;/a&gt;1. SRP (Single Responsibility Principle)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一個class只對一種role(actor)負責。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://InkyChew.github.io/categories/Notes/"/>
    
      <category term="OOSE" scheme="https://InkyChew.github.io/categories/Notes/OOSE/"/>
    
    
      <category term="OOSE" scheme="https://InkyChew.github.io/tags/OOSE/"/>
    
  </entry>
  
  <entry>
    <title>物件導向的三大特性和抽象化</title>
    <link href="https://InkyChew.github.io/2020/12/09/oo-basic/"/>
    <id>https://InkyChew.github.io/2020/12/09/oo-basic/</id>
    <published>2020-12-09T13:21:01.000Z</published>
    <updated>2020-12-10T02:34:22.368Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h1><h2 id="1-封裝-Encapsulation"><a href="#1-封裝-Encapsulation" class="headerlink" title="1. 封裝 (Encapsulation)"></a>1. 封裝 (Encapsulation)</h2><p>將attribute(variable)與method打包成一個class，以隱藏實作細節，提高資料完整性。其他的class只能透過method(setter/getter)修改/取得variable的值。</p><ul><li>private variable</li><li>public method</li></ul><a id="more"></a><h2 id="2-繼承-Inheritance"><a href="#2-繼承-Inheritance" class="headerlink" title="2. 繼承 (Inheritance)"></a>2. 繼承 (Inheritance)</h2><ul><li>父類別(superclass)</li><li>子類別(subclass)  </li><li>subclass inherit superclass</li></ul><p>將多個相同性質的子類別，擷取出共有的特徵，並將這些共有特徵定義成一個父類別，讓子類別可以繼承。避免subclass重複定義相同的attribute與method。</p><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;</span><br><span class="line">  String name;</span><br><span class="line">  <span class="hljs-keyword">int</span> age;</span><br><span class="line">  Animal (String name, <span class="hljs-keyword">int</span> age) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.name = name;</span><br><span class="line">    <span class="hljs-keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span> <span class="hljs-params">(String food)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"I want to eat "</span> + food);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;</span><br><span class="line">  Dog (String name, <span class="hljs-keyword">int</span> age) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(name, age);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span> <span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>.eat(<span class="hljs-string">"Bones!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="覆寫-overriding"><a href="#覆寫-overriding" class="headerlink" title="覆寫 (overriding)"></a>覆寫 (overriding)</h3><ul><li>方法名稱，回傳型態，參數必須相同。</li><li>subclass的方法 覆寫 superclass的方法。</li><li>subclass可以針對其特定需求覆寫superclass的方法，讓設計更為彈性。  </li></ul><p>Dog.eat override Animal.eat<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span> <span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"I am not hungry!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span> <span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"Bones!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="過載-overloading"><a href="#過載-overloading" class="headerlink" title="過載 (overloading)"></a>過載 (overloading)</h3><p>在同一個class裡，定義了<strong>相同名稱</strong>但是<strong>結構不同</strong>的方法。<br>例如: 回傳型態不同，參數不同。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span> <span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"I am not hungry!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span> <span class="hljs-params">(String food)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"I want to eat "</span> + food);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-多型-Polymorphism"><a href="#3-多型-Polymorphism" class="headerlink" title="3. 多型 (Polymorphism)"></a>3. 多型 (Polymorphism)</h2><p>同一個方法，有不同的行為。</p><ul><li>override</li><li>interface</li></ul><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Interface Animal &#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"Bones!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="hljs-string">"Fish!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Abstraction-抽象化"><a href="#Abstraction-抽象化" class="headerlink" title="Abstraction (抽象化)"></a>Abstraction (抽象化)</h1><p>隱藏實作細節，只提供可用功能給使用者。</p><h2 id="Abstract-Class"><a href="#Abstract-Class" class="headerlink" title="Abstract Class"></a>Abstract Class</h2><ul><li>有abstract method 的 class 即為 Abstract class。也可以包含有body實作的concrete method。</li><li>不能夠create(new)，必須被子類別繼承後才能透過子類別create。</li><li>abstract method: 沒有body的method。必須透過子類別加以實作行為。</li></ul><p><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">// abstract method</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span> <span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">// concrete method</span></span><br><span class="line">    System.out.println(<span class="hljs-string">"I am not hungry!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><ul><li>集結相關的abstract method。</li><li>只有abstract method。<br><figure class="highlight java hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Interface Animal &#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;三大特性&quot;&gt;&lt;a href=&quot;#三大特性&quot; class=&quot;headerlink&quot; title=&quot;三大特性&quot;&gt;&lt;/a&gt;三大特性&lt;/h1&gt;&lt;h2 id=&quot;1-封裝-Encapsulation&quot;&gt;&lt;a href=&quot;#1-封裝-Encapsulation&quot; class=&quot;headerlink&quot; title=&quot;1. 封裝 (Encapsulation)&quot;&gt;&lt;/a&gt;1. 封裝 (Encapsulation)&lt;/h2&gt;&lt;p&gt;將attribute(variable)與method打包成一個class，以隱藏實作細節，提高資料完整性。其他的class只能透過method(setter/getter)修改/取得variable的值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;private variable&lt;/li&gt;
&lt;li&gt;public method&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://InkyChew.github.io/categories/Notes/"/>
    
    
      <category term="OOSE" scheme="https://InkyChew.github.io/tags/OOSE/"/>
    
  </entry>
  
  <entry>
    <title>軟體工程師有三種，你是哪一種?</title>
    <link href="https://InkyChew.github.io/2020/12/02/engineer-3types/"/>
    <id>https://InkyChew.github.io/2020/12/02/engineer-3types/</id>
    <published>2020-12-02T07:36:55.000Z</published>
    <updated>2020-12-23T11:36:02.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h1><ol><li>了解軟體工程師的種類與職涯發展方向。</li><li>成為一名優秀的軟體工程師所需技能。</li><li>軟體工程師可依照思維區分為三種類型。</li></ol><a id="more"></a><h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>在文章<a href="https://wei729.pixnet.net/blog/post/17798907" target="_blank" rel="noopener">剖析IT人員工作種類</a>中，可以大致瞭解IT領域人員的各個職稱與工作內容。再依照自身的興趣，選定想走的方向，並到人力銀行使用關鍵字進行搜索，進而了解並整理出各個職位的必備技能，以供未來進修學習的方向。以下為我有興趣的職位:</p><h2 id="研究開發人員-RD"><a href="#研究開發人員-RD" class="headerlink" title="研究開發人員(RD)"></a>研究開發人員(RD)</h2><h3 id="軟體工程師"><a href="#軟體工程師" class="headerlink" title="軟體工程師"></a>軟體工程師</h3><ol><li>前端</li><li>後端  </li><li>DevOps</li></ol><h3 id="系統分析師"><a href="#系統分析師" class="headerlink" title="系統分析師"></a>系統分析師</h3><ul><li>程式撰寫前進行規劃與設計。  </li><li>使用者與開發團隊間的溝通橋樑。  </li><li>須具備多年程式設計經驗。</li></ul><h2 id="軟體工程師的三種類型"><a href="#軟體工程師的三種類型" class="headerlink" title="軟體工程師的三種類型"></a>軟體工程師的三種類型</h2><p>可依照思維區分為:</p><h3 id="1-Coder"><a href="#1-Coder" class="headerlink" title="1. Coder"></a>1. Coder</h3><p>對於被交付的任務，只求盡快且輕鬆的完成工作。也就是老闆說什麼，就做什麼。不質疑功能的好壞，不提出更好的想法以優化產品。寫程式時看重輸入、輸出與結果。產品只是所有功能的結合，很可能不符合使用者需求。企業若想開發出好產品，必須要有很厲害的PM與PD。</p><h3 id="2-Hacker"><a href="#2-Hacker" class="headerlink" title="2. Hacker"></a>2. Hacker</h3><p>Know and do 和 Don’t know and do 這兩類型的人都可以稱為 Hacker。因此 Hacker 也被稱為 Doer。Hacker一詞，在字典上有兩個解釋，分別為: </p><ol><li>寫程式和解決問題的專家。 (Know and do)</li><li>沒有技能或天賦而投入於活動中的人。  (Don’t know and do)</li></ol><p><strong>為什麼做?</strong> 對Hacker而言很重要，他們致力於打造好用且創新的產品。因此提出更好的想法以優化產品，思考產品是否有用?是否能符合需求?</p><h3 id="3-Architect"><a href="#3-Architect" class="headerlink" title="3. Architect"></a>3. Architect</h3><p>寫程式時看重架構、優化、成本、格局。持續的學習、思考、質疑、創造。用Geek來稱呼這些人也不為過!他們擁有兩大特徵:</p><ol><li>喜歡有秩序，可以重複使用且永久保存的code</li><li>樂於分享</li></ol><p>他們致力於開創新系統、新套件、新框架，將複雜重複的流程打包以簡化流程，並無私的分享給世界，對於IT領域有很大的貢獻。例如: Linux, Open source 。</p><h1 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h1><p>期許自己在軟體工程師的職涯中，永遠當一個Hacker，並朝著Architect之路邁進。雖然寫code的功力還遠遠不足，但我可以一直是個分享者Giver，持續的學習並分享。</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ol><li><a href="https://betweengos.com/career-3-types-of-programmer-coder-hacker-architect/" target="_blank" rel="noopener">如果妳也開始學寫Code－依個性分類，會是哪種程式設計師？</a>  </li><li><a href="https://wei729.pixnet.net/blog/post/17798907" target="_blank" rel="noopener">剖析IT人員工作種類</a></li><li><a href="https://dennis74728.pixnet.net/blog/post/13012312" target="_blank" rel="noopener">SA,SD與SE</a></li><li><a href="https://tw.twincl.com/programming/*652e" target="_blank" rel="noopener">程式員求生指南：關於寫程式的二三事</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;了解軟體工程師的種類與職涯發展方向。&lt;/li&gt;
&lt;li&gt;成為一名優秀的軟體工程師所需技能。&lt;/li&gt;
&lt;li&gt;軟體工程師可依照思維區分為三種類型。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Reflection" scheme="https://InkyChew.github.io/categories/Reflection/"/>
    
    
      <category term="reflection" scheme="https://InkyChew.github.io/tags/reflection/"/>
    
  </entry>
  
  <entry>
    <title>2020新加坡商鈦坦科技台北實習生面試</title>
    <link href="https://InkyChew.github.io/2020/11/26/interview-Taitan/"/>
    <id>https://InkyChew.github.io/2020/11/26/interview-Taitan/</id>
    <published>2020-11-26T11:25:27.000Z</published>
    <updated>2020-12-04T00:55:07.153Z</updated>
    
    <content type="html"><![CDATA[<p>應徵職位: 軟體工程師 (台北學期實習生)</p><h2 id="面試之前的小功課"><a href="#面試之前的小功課" class="headerlink" title="面試之前的小功課"></a>面試之前的小功課</h2><ol><li>完成鈦坦電子履歷</li><li>看敏捷思維的影片，回答三個問題</li><li>邏輯測驗</li><li>DISC人格測驗</li></ol><h2 id="面試流程"><a href="#面試流程" class="headerlink" title="面試流程"></a>面試流程</h2><ol><li>程式筆試(30min)</li><li>暖場自我介紹活動</li><li>跑關面試</li><li>製作海報發表</li><li>桌遊</li><li>回顧(Retro)<a id="more"></a></li></ol><h3 id="程式筆試"><a href="#程式筆試" class="headerlink" title="程式筆試"></a>程式筆試</h3><ol><li><p>印出三角形<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   #</span><br><span class="line">  ## </span><br><span class="line"> #-#</span><br><span class="line">#--#</span><br><span class="line"> #-#</span><br><span class="line">  ##</span><br><span class="line">   #</span><br></pre></td></tr></table></figure></p></li><li><p>判斷n為2的幾次方<br> n = 4; return 2<br> n = 3; return -1<br> <em>不確定有沒有記錯</em></p></li><li><p>n = 4; ary = [2, 5, 1, 4]<br> if n 在 ary 中: True<br> else: False</p></li><li><p>[1, 2, 3, 4, 5, 6, 7]<br>找出第三大的數字</p></li><li><p>SQL</p></li></ol><h3 id="暖場自我介紹活動"><a href="#暖場自我介紹活動" class="headerlink" title="暖場自我介紹活動"></a>暖場自我介紹活動</h3><ul><li>在一張A4紙上，寫上希望別人怎麼稱呼你，三句有關於自己的話(可以多寫)，並畫出一個能夠代表自己的圖案。</li><li>利用這張紙，跟身旁的夥伴介紹自己，並請對方簽名，至少蒐集到三個名子。</li><li>活動結束後，主持人會問大家對誰印象最深刻。</li></ul><h3 id="跑關面試-5關"><a href="#跑關面試-5關" class="headerlink" title="跑關面試(5關)"></a>跑關面試(5關)</h3><p>問題可分為這五大類</p><ol><li>未來規劃  </li><li>跳脫框架<ul><li>你跟你的朋友分一塊Pizza，請問你會怎麼切讓自己吃到最多?</li><li>在大學有沒有做過什麼跳脫框架的事?</li></ul></li><li>衝突失敗<br> 描述衝突與失敗的經驗，並將重點放在你怎麼面對與解決。</li><li>程式邏輯<br> 根據程式筆試所寫的答案，討論程式邏輯，演算法與時間複雜度。</li><li>針對你的履歷自傳提問</li></ol><p>我在面試前準備的面試題目:</p><ol><li>自我介紹<br>在自我介紹中，提到我擅長什麼?我的優點是什麼?團隊合作的經驗，為什麼喜歡團隊合作?</li><li>想在這裡學到什麼，為什麼想來鈦坦?</li><li>失敗的經驗或挫折?</li><li>你覺得你有什麼樣的缺點?</li><li>為什麼要錄取你?</li><li>請問有沒有什麼問題想問的呢?</li></ol><p>除了跳脫框架的問題讓我有些意外，其他的題目都可以透過我在面試前準備的這些題目，加以延伸進行回答。建議熟讀自己所寫的履歷自傳，並了解敏開發與Scrum。回答時間有限，當面試官問誰要先回答時?盡量爭取當第一個先說話的，以免自己還沒講到重點時，就要換關了。如果是自己沒有預料到的問題，盡量也要跟能為自己加分的經驗結合，不要亂回答。</p><h3 id="製作海報發表"><a href="#製作海報發表" class="headerlink" title="製作海報發表"></a>製作海報發表</h3><ul><li>題目: 你所認為的敏捷?</li><li>方式:<ol><li>拿一張海報紙，便利貼，彩色筆進行分組討論</li><li>分組討論後進行報告</li></ol></li></ul><p>我們這組寫下敏捷思維的核心概念，並舉出自己使用敏捷思維的例子。<br>另外一組將敏捷寫在中間，並舉了三大特點下去延伸，呈現的方式類似心智圖，是很有組織的表示方式，可以學習。</p><h3 id="桌遊"><a href="#桌遊" class="headerlink" title="桌遊"></a>桌遊</h3><ul><li>角色:<ol><li>建築師: 只能比手畫腳</li><li>監工: 只能動口</li><li>工人: 戴上眼罩，動手組合積木</li><li>旁觀者: 什麼都不能做，只能用眼睛看</li></ol></li></ul><p>建築師抽取卡片，比出要組合積木的樣子與方向，給監工看。監工依照建築師的比劃，用說的方式指揮工人，應該要拿取哪一塊積木，並引導正確的角度，將積木放在正確的位子，以組合出卡片上所要求的樣子。</p><h3 id="回顧-Retro"><a href="#回顧-Retro" class="headerlink" title="回顧(Retro)"></a>回顧(Retro)</h3><ol><li>將今天面試印象最深刻的事或任何想分享的事物寫在便利貼上，幾分鐘後進行口頭分享。</li><li>有沒有想要感謝的夥伴，覺得哪一位夥伴最不錯，為什麼?</li><li>寫回饋表單。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;應徵職位: 軟體工程師 (台北學期實習生)&lt;/p&gt;
&lt;h2 id=&quot;面試之前的小功課&quot;&gt;&lt;a href=&quot;#面試之前的小功課&quot; class=&quot;headerlink&quot; title=&quot;面試之前的小功課&quot;&gt;&lt;/a&gt;面試之前的小功課&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;完成鈦坦電子履歷&lt;/li&gt;
&lt;li&gt;看敏捷思維的影片，回答三個問題&lt;/li&gt;
&lt;li&gt;邏輯測驗&lt;/li&gt;
&lt;li&gt;DISC人格測驗&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;面試流程&quot;&gt;&lt;a href=&quot;#面試流程&quot; class=&quot;headerlink&quot; title=&quot;面試流程&quot;&gt;&lt;/a&gt;面試流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;程式筆試(30min)&lt;/li&gt;
&lt;li&gt;暖場自我介紹活動&lt;/li&gt;
&lt;li&gt;跑關面試&lt;/li&gt;
&lt;li&gt;製作海報發表&lt;/li&gt;
&lt;li&gt;桌遊&lt;/li&gt;
&lt;li&gt;回顧(Retro)&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Interview" scheme="https://InkyChew.github.io/categories/Interview/"/>
    
    
      <category term="internship" scheme="https://InkyChew.github.io/tags/internship/"/>
    
      <category term="interview" scheme="https://InkyChew.github.io/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>TodoList</title>
    <link href="https://InkyChew.github.io/2019/06/29/TodoList/"/>
    <id>https://InkyChew.github.io/2019/06/29/TodoList/</id>
    <published>2019-06-29T02:36:40.000Z</published>
    <updated>2019-06-29T11:51:16.340Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://blog.hubspot.com/hubfs/To_Do_List.png" alt="TodoList-Vue.js"><br>A To-do-list create by Vue.js.</p><a id="more"></a><ul><li><p><a href="https://github.com/InkyChew/Vue.js_todolist" target="_blank" rel="noopener">https://github.com/InkyChew/Vue.js_todolist</a></p></li><li><p>body中引入vue.js<br><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code></p></li><li><p>Directive<br>v-model 資料雙向綁定<br>v-on method<br>v-if<br>v-for<br>v-focus 自訂directive，防止多個 li 因 v-model 綁定同時修改</p></li></ul><p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">   focus: &#123;</span><br><span class="line">     inserted: function (el) &#123;</span><br><span class="line">       el.focus()</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p><code>v-bind:class=&quot;{&#39;completed&#39; : todo.completed}&quot;</code><br>use <code>completed</code> class ， when <code>todo.completed == true</code></p><p><code>:class</code> 無法使用data綁定class<br><code>:style</code> 可使用data綁定class</p><p>配置方式<br><img src="https://ithelp.ithome.com.tw/upload/images/20190627/20111666B56MKRpVsV.png" alt="https://ithelp.ithome.com.tw/upload/images/20190627/20111666B56MKRpVsV.png"></p><hr><p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;</span><br><span class="line">    el:&apos;&apos;,  //綁定最外層要素</span><br><span class="line">    data: &#123;&#125;,  //綁定 v-model 資料</span><br><span class="line">    computed:&#123;&#125;,  //即時更新的運算資料</span><br><span class="line">    methods: &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><hr><ul><li>參考資料<br><a href="https://peterhpchen.github.io/VuejsQuest/basic/06_Directives.html#%E4%BB%8B%E7%B4%B9" target="_blank" rel="noopener">https://peterhpchen.github.io/VuejsQuest/basic/06_Directives.html#%E4%BB%8B%E7%B4%B9</a><br><a href="https://quip.com/M2eCAQo6bXh8" target="_blank" rel="noopener">https://quip.com/M2eCAQo6bXh8</a><br><a href="https://vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">https://vuejs.org/v2/guide/installation.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://blog.hubspot.com/hubfs/To_Do_List.png&quot; alt=&quot;TodoList-Vue.js&quot;&gt;&lt;br&gt;A To-do-list create by Vue.js.&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://InkyChew.github.io/categories/Notes/"/>
    
      <category term="Front-end" scheme="https://InkyChew.github.io/categories/Notes/Front-end/"/>
    
    
      <category term="Vue.js" scheme="https://InkyChew.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>weatherMap</title>
    <link href="https://InkyChew.github.io/2019/06/29/weatherMap/"/>
    <id>https://InkyChew.github.io/2019/06/29/weatherMap/</id>
    <published>2019-06-29T00:27:39.000Z</published>
    <updated>2019-06-30T08:36:37.035Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.pexels.com/photos/226664/pexels-photo-226664.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=800%22/" alt="WeatherMap-Vue.js"><br>A Taiwan weather map create by Vue.js.</p><a id="more"></a><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><ul><li><a href="https://s.codepen.io/becomegood0308/debug/GbyNVM/NjMYzqbKOjDr" target="_blank" rel="noopener">https://s.codepen.io/becomegood0308/debug/GbyNVM/NjMYzqbKOjDr</a></li><li>codepen: <a href="https://codepen.io/becomegood0308/pen/GbyNVM" target="_blank" rel="noopener">https://codepen.io/becomegood0308/pen/GbyNVM</a></li></ul><h3 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h3><ul><li>name and get id/data-name</li></ul><h3 id="data"><a href="#data" class="headerlink" title="data"></a>data</h3><ul><li>regular expressions</li><li>json data array</li></ul><h3 id="Vue-js-jQuery"><a href="#Vue-js-jQuery" class="headerlink" title="Vue.js / jQuery"></a>Vue.js / jQuery</h3><p><img src="https://ithelp.ithome.com.tw/upload/images/20190628/20111666gMD6yanT6B.png" alt="https://ithelp.ithome.com.tw/upload/images/20190628/20111666gMD6yanT6B.png"></p><ul><li>vobj = vm</li><li>vm.filter = <code>&lt;p id=&quot;&quot;&gt;</code></li></ul><hr><p>參考資料<br><a href="https://www.youtube.com/watch?v=eHrGB5EHtF4" target="_blank" rel="noopener">https://www.youtube.com/watch?v=eHrGB5EHtF4</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.pexels.com/photos/226664/pexels-photo-226664.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=750&amp;w=800%22/&quot; alt=&quot;WeatherMap-Vue.js&quot;&gt;&lt;br&gt;A Taiwan weather map create by Vue.js.&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="https://InkyChew.github.io/categories/Notes/"/>
    
      <category term="Front-end" scheme="https://InkyChew.github.io/categories/Notes/Front-end/"/>
    
    
      <category term="Vue.js" scheme="https://InkyChew.github.io/tags/Vue-js/"/>
    
      <category term="jQuery" scheme="https://InkyChew.github.io/tags/jQuery/"/>
    
      <category term="sass" scheme="https://InkyChew.github.io/tags/sass/"/>
    
      <category term="svg" scheme="https://InkyChew.github.io/tags/svg/"/>
    
      <category term="json" scheme="https://InkyChew.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="https://InkyChew.github.io/2019/06/28/hello-world/"/>
    <id>https://InkyChew.github.io/2019/06/28/hello-world/</id>
    <published>2019-06-28T14:03:07.240Z</published>
    <updated>2019-06-29T03:48:25.457Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="hljs-string">"My New Post"</span></span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><p><figure class="highlight bash hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
